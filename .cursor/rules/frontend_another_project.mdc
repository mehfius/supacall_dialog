---
description: 
globs: 
alwaysApply: true
---

function start(data) {

  navigator.mediaDevices.getUserMedia({
    video: {
      height: 480,
      width: 640
    }, audio: true
  })
    .then(function (stream) {
      myStream = stream
      document.getElementById('preview-player').srcObject = myStream
      socket = initServerConnection(data);

    }).catch(function (err) {
      console.log(err)
      alert(err)
    })


}

function initServerConnection(data) {

  var rotas = JSON.parse(localStorage.rotas);

  var socket = io(rotas.url_videostream, {
    query: {
      room: data.id,
      user: data.users.label,
      room_name: data.label,
      card_date: data.created_at
    }
  })
  
  document.querySelector('videocall').setAttribute("status","entrando")
  
  socket.on('disconnect-user', function (data) {
    var user = users.get(data.id)
    if (user) {
      users.delete(data.id)
      user.selfDestroy()
    }
  })

  socket.on('call', function (data) {

    let user = new User(data.id)
    user.pc = createPeer(user)
    users.set(data.id, user)

    createOffer(user, socket)
  })

  socket.on('offer', function (data) {
 
    var user = users.get(data.id)
    if (user) {
      answerPeer(user, data.offer, socket)
    } else {
      let user = new User(data.id)
      user.pc = createPeer(user)
      users.set(data.id, user)
      answerPeer(user, data.offer, socket)
    }
  })

  socket.on('answer', function (data) {

    var user = users.get(data.id)
    if (user) {
      user.pc.setRemoteDescription(data.answer)
    }
  })

  socket.on('candidate', function (data) {
    var user = users.get(data.id)
    if (user) {
      user.pc.addIceCandidate(data.candidate)
    } else {
      let user = new User(data.id)
      user.pc = createPeer(user)
      user.pc.addIceCandidate(data.candidate)
      users.set(data.id, user)
    }
  })

  socket.on('connect', function () {
    document.querySelector('videocall').setAttribute("status","conectando")
  })

  socket.on('connect_error', function (error) {
    
    console.log('Connection ERROR!')
    console.log(error)
    document.querySelector('videocall').setAttribute("status","erro")
    
    setTimeout(() => {
      
      document.querySelector('videocall').setAttribute("status","reconectando")
      socket.connect();
      
    }, 1000);
    
    leave()
  })

  return socket
}

function leave() {
  socket.close()
  for (var user of users.values()) {
    user.selfDestroy()
  }
  users.clear()

}

class User {
  constructor(id) {
    this.id = id;
  }

  selfDestroy() {
    if (this.player) {
      this.player.remove()
    }

    if (this.pc) {
      this.pc.close()
      this.pc.onicecandidate = null
      this.pc.ontrack = null
      this.pc = null
    }
  }

  sendMessage(message) {
    if (this.dc) {
      this.dc.send(message)
    }
  }
}

const { RTCPeerConnection } = window;

function createPeer(user) {
  const rtcConfiguration = {
    iceServers: [{
      urls: 'stun:stun.l.google.com:19302'
    }]
  }
  var pc = new RTCPeerConnection(rtcConfiguration)
  pc.onicecandidate = function (event) {
    if (!event.candidate) {
      return
    }

    socket.emit('candidate', {
      id: user.id,
      candidate: event.candidate
    })
  }

  for (const track of myStream.getTracks()) {
    pc.addTrack(track, myStream);
  }

  pc.ontrack = function (event) {
    if (user.player) {
      return
    }
    user.player = addVideoPlayer(event.streams[0])
  }

  pc.ondatachannel = function (event) {
    user.dc = event.channel
    setupDataChannel(user.dc)
  }

  return pc
}

function createOffer(user, socket) {
  user.dc = user.pc.createDataChannel('chat')
  setupDataChannel(user.dc)

  user.pc.createOffer().then(function (offer) {
    user.pc.setLocalDescription(offer).then(function () {
      socket.emit('offer', {
        id: user.id,
        offer: offer
      })
    })
  })
}

function answerPeer(user, offer, socket) {
  user.pc.setRemoteDescription(offer).then(function () {
    user.pc.createAnswer().then(function (answer) {
      user.pc.setLocalDescription(answer).then(function () {
        socket.emit('answer', {
          id: user.id,
          answer: answer
        })
      })
    })
  })
}

function setupDataChannel(dataChannel) {
  dataChannel.onopen = checkDataChannelState
  dataChannel.onclose = checkDataChannelState
  dataChannel.onmessage = function (e) {
    addMessage(e.data)
  }
}

function checkDataChannelState(dataChannel) {
  console.log('WebRTC channel state is:', dataChannel.type)
}